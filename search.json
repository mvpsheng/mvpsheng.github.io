[{"title":"Hello World","url":"/2022/11/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"我如何应对我正在经历的困难","url":"/2022/11/09/%E6%88%91%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E6%88%91%E6%AD%A3%E5%9C%A8%E7%BB%8F%E5%8E%86%E7%9A%84%E5%9B%B0%E9%9A%BE/","content":"Hello World！我目前的状况目前我在杭州，没有固定的居住地，每天需要寻找一个安静的能提供我进行面试准备的环境。 一方面我可以改简历，一方面我可以准备项目。我解决了居住地的问题，我打算这几天都住在这个安静的、让我舒服的青年旅舍。 我有时间和空间来做我想做的事情。我没有找其他的也许可以很快开始的，同时也足够让我生活在这个城市的工作。因为我觉得我具备去做我专业技能相关工作的能力。我觉得我具备很强的逻辑推理能力，思维敏捷，可以去解决很复杂的问题。我想要通过靠做软件开发的工作来生活。因为做软件开发的工作会让我觉得很兴奋，我对于这件事情很有激情。我为此做了很多准备。但是目前我没有得到什么机会。\n做这个博客的目的我觉得我现在头脑里面有很多想法，所以我打算搭建这个博客，一个我愿意经常使用的博客，而不是直接可以去发布的像CSDN。这是不一样的体验，这个平台是我自己给自己搭建起来的，我可以选择自己的主题，选择自己的编辑器。可以让我感觉自己在像一个专业的人在工作一样。\n我对公司的期待工作内容：有创造性的，有挑战的工作。公司文化：我想要公司的团队成员能够有很融洽的关系， 很强的合作意识和逻辑思维能力。包容的，多元的，团队合作的。\n这个文章需要拓展， 第一篇文章要写的内容是 我为什么要搭建这个博客。 以及我想要写那些内容。\n","tags":["思路总结"]},{"title":"对于做项目的理解","url":"/2022/11/09/%E5%AF%B9%E4%BA%8E%E5%81%9A%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%90%86%E8%A7%A3/","content":"如何开始一个项目构建一个项目， 不意味着从头开始一行一行的写一个项目，也许可以复制大量的代码（但是需要理解代码作用），也许可以在这个原有项目的基础上增加一些新的模块，再或者可以对源代码进行修改或删除一些旧代码同时增加一些新代码。\n","tags":["软件开发理解"]},{"title":"self introduction","url":"/2022/11/09/self-introduction/","content":"职业我在干什么我在找工作，目前的意向岗位是软件开发、后端开发。\n我的技术生涯我的技术学习主要是在大学和大学毕业后，自学。我主要学习的技术栈是后端开发相关的。编程语言：Java框架：Spring、SpringBoot、SpringCloud、MyBatis数据库：MySQL、MongoDB、Redis\n项目经验主要是基于SpringBoot开发的项目，比较喜欢做工具相关的项目。这样的项目目的是可以方便我学习或者自我提升的工具。\nTODO-List（规划每天要干什么）、 AlgorithmDesignCanvas\n我的学习方法和途径我的思想是通过多种途径（多种资源和多个人）学习，可以增强我对于一个概念的理解。通过更多的练习，可以让我对于一些技术有更熟练的应用能力。\n对标以上两个理念，我产生了我的方法，以及我怎么找资源。\n我通过看官方文档学习Spring（因为很细节、很全面、还有一些上手的例子）我会通过看视频学习，Coursera上课，github仓库找项目、Google看一些文档或者概念\n我的职业规划两到三年之内，我规划是广度优先扩展，希望自己对这个行业有更多的学习、认知和尝试。三年之后，深度优先，对于行业有自己的清晰的发展方向，开始深入研究，希望有所贡献。\n其他我认为很多事情是相互产生影响的。比如我在旅行的过程中，我会有很多想法在大脑浮现出来。我会对很多事情有一些更深入的思考，或者有一些新的想法。\n内容创作通常我会把自己的一些想法记录下来，不同的阶段会有不同的工具去记录。在家的时候，有时会写在日记本上。 还有很多会记录在手机的便签上。也有一些会记录在github、其他的手机笔记本上，电脑的便签上。我觉得这样记录很零散，不便于之后查找一些信息，所以我决定专注于自己这个Github博客上，进行内容创作。\n平时的一些想法 小的点子会记录在手机便签里。最后都整理在这个博客里。\n旅行我喜欢旅行，因为我在离开一个地方的时候，我会有很多想法浮现出来，我通常会在交通工具上思考，并记录一些内容。我喜欢看山水，喜欢自然风光。\n运动健身篮球，各种球类街头健身\n阅读","tags":["我"]},{"title":"如何学习编程","url":"/2022/11/09/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B/","content":"逻辑你的大脑就是一块肌肉，学习编程就好像健身，需要持续性的、不断重复的练习。 持续性很重要。\n第二个就是渐进式学习。\n如何学习？学习一个新的概念，是因为它好用，用它可以节省时间，可以节省体力，它可以让系统消耗更小，可以有更快的响应时间等，总之就是为了能够应用并能带来好处。\n那么学习编程的一些概念就是为了理解，并应用到自己的场景中。\n首先入手 概念，这个名词，是什么，为什么产生，为什么用。懂了概念之后，learn by doing！开始着手怎么用，如何应用到自己的场景中。\n具体流程\n基本语法： 数据类型、变量、逻辑控制语句、运算符、注释、函数。\n数组、枚举、集合。\n常用类。\n语言特性：编程模式、语言自身特性。\n代码组织、模块加载、库管理。\n容错处理：异常、日志、调试、测试。\n输入输出与文件处理。\n回调机制。\n序列化与反序列化。\n进阶特性： 并发、反射、泛型、元数据， 根据开发需求去学习。\n库和框架，构建技术生态圈，实际应用领域去学习。\n\n","tags":["编程"]},{"title":"如何掌握一个技能","url":"/2022/11/09/%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E4%B8%80%E4%B8%AA%E6%8A%80%E8%83%BD/","content":"重复掌握一个技巧之前，状态是要么完全不会，要么不完全会。不断的重复练习，目的是暴露并发现自己不会、不懂的地方，对这些地方学习，或改正，在下一次练习的时候去避免。避免之前犯过的错误，分析为什么出现这个错误，正确的是什么样子。Ever tried， ever failed.No Matter. Try again, fail again. Fail better.重复的练习的生命周期：练习-&gt;暴露问题-&gt;改善问题，避免相同错误-&gt;从而不断减少错误-&gt;从而逐渐熟练。\n应用应用是目标。 为了能够应用，而去掌握一门技能。学习游泳不是为了学会游泳，而是为了游泳。学习编程不是为了会解决两数之和的问题，不是为了写hello，world。而是用编程去计算出一个问题，设计一个网页，做一个产品。所以学会一些技能之后要去用。\n","tags":["技巧"]},{"title":"what is & how to use kubernetes","url":"/2022/11/10/what-is-how-to-use-kubernetes/","content":"what is kubernetesk8s 是一个用来自动部署，扩展和管理容器化的应用的开源系统。\n","tags":["技术研究"]},{"title":"what is & how to use Docker","url":"/2022/11/10/what-is-how-to-use-Docker/","content":"what is DockerDocker 是一个用来开发、发布和运行应用的开放平台。docker 工具目的是让开发者更简单的应用容器来创建、部署和运行应用。\nwhy Docker1.Docker 可以让基础架构和应用程序分离，这样可以快速交付软件。2.Docker可以像管理应用软件一样管理基础架构。3.利用Docker的快速交付、测试和部署方法，可以显著减少写代码和生产环境运行之间的延迟。4.Docker提供工具和平台去管理容器的生命周期。\nhow to use Docker &amp; what to dowhat to do with Docker1.快速一致的发布应用2.响应式的部署和扩容3.相同硬件上更多的工作负载\nDocker 的工作基于容器和镜像，所以需要理解什么是容器和镜像。容器是和机器上其他进程相互隔离的沙盒进程。就是一个可运行的镜像实例。容器镜像就是一个包含了容器运行的文件系统、包括所有依赖、配置、脚本二进制文件等。也包含一些容器其他的配置，包括环境变量、初始运行命令和其他元数据。\ngetting start1.创建一个包含能够构建java镜像需要指令的Dockerfile2.将镜像作为容器运行3.建立本地开发环境，给容器连接数据库4.用Docker Compose 运行这个Spring Boot应用5.用Github Actions为你的应用去配置CI&#x2F;CD管道6.把应用部署到云上\n","tags":["技术研究"]},{"title":"学习agile","url":"/2022/11/09/%E5%AD%A6%E4%B9%A0agile/","content":"什么是agile敏捷是一种迭代式的项目管理和软件开发方法，可以更快为用户提供价值。敏捷团队更小的、易消耗，增量交付工作。持续性的评估需求、计划和结果，因此可以容易更快响应变化。\n如何做适应agile的开发者（三件事情—分支、持续集成、自动测试使得保证代码质量的情况下更有生产力）branching strategy分支策略可能因为团队而改变三种策略： release branching 、 feature branching 、 task branching（issue branching）\nTesting\nCI（agile和devops的最佳实践—持续的build，和自动化测试）主要包含两件事情：确保代码可编译；测试确保代码达到设计的目标持续集成就是持续的向主分支集成改变的代码，同时尽可能频繁和尽早测试改变的代码。CI的好处： 更快的得到代码改变的反馈。\nCI中的测试：Unit test、API test、 Functional tests\n","tags":["技巧"]},{"title":"学习scrum","url":"/2022/11/09/%E5%AD%A6%E4%B9%A0scrum/","content":""},{"title":"为什么我想做软件开发","url":"/2022/11/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E5%81%9A%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/","content":"软件开发的特点软件开发是比较要求逻辑性，需要逻辑清晰才能设计出运行良好的程序。开发的过程需要抽象思维，描述过程、总结规律。将事物特性抽象出来，表达出关系，最终可以得到一种自动化的流程或者减少重复的动作。\n我的爱好与特长我认为我比较擅长逻辑思考，推理分析。我学习到一些系统设计，算法设计，数据库设计，最终会得到一个系统，这个过程让我很有成就感。\n我做了什么大学期间期末考试中得出结论，可以通过一定的方法复习，可以轻松的考高分。我喜欢软件设计，所以我尝试做了一些工具性的项目，让我方便去做其他事情，比如算法设计平台，todolist。\n","tags":["我"]},{"title":"未来","url":"/2022/11/10/%E6%9C%AA%E6%9D%A5/","content":"未来的工作做自己喜欢的工作，WLB希望可以对软件开发有所贡献。  开源软件。坚持做一个content creater。\n未来的生活坚持健身、阅读、打理好自己的形象坚持记录生活。\n感想在写这篇文章的时候，我突然感觉，想要未来的样子，也许就是现在没有的样子。规划未来，就是在给现在的自己指导要注重什么，要做什么。\n","tags":["我"]},{"title":"Java语言到Spring框架","url":"/2022/11/11/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD%E6%80%BB%E7%BB%93/","content":"为什么总结学习很多技术，总结为了第一方面，加深记忆。第二方面，加深理解。第三方面，提炼出自己的理解，为我所用。\n面向对象Java语言有这么一些概念跟面向对象有关系：面向对象中的六个概念：class类、对象、抽象、继承、封装、多态1、对象：每一个现实世界的实体都是一个对象。 一个对象有行为和属性。 一个汽车可以移动 ，可以用价格，排量，颜色等属性。\n2、类：所有相关的对象的集合就是一个类。类是所有相关对象的集合，出租车、公交车、救护车都属于汽车类。\n3、继承：一个类可以从父类中继承一些特性就好像我们从父母那里也继承了一些特性。 就像手机，可以有子类 移动电话和固定电话  但是这俩都继承了打电话的特性。\n4、封装就是将数据包装到一个单元中，并且保护它将想胶囊一样，将药物颗粒封装起来，与外部环境隔离。银行将存储保存在保险柜里，用密码保护起来。\n5、抽象将复杂度隐藏起来，暴露简单相关的内容。汽车将引擎、很多机械复杂性隐藏卡里， 用户可以用到刹车制动器、加速器、变速箱。\n6.多态多种形式。同样的名字但是有不同的形式。行为名称是一样的，不同对象的行为表现出不一样。就好像下棋，棋子的行为是移动， 但是有的可以沿着对角线移动，有的只能水平和垂直移动。\n设计模式与其在框架中的应用1.工厂模式Spring IOC中用到了工厂模式去创建bean的对象实例\n2.单例模式Spring中Bean的默认为singleton单例模式。\n3.代理模式AOP模块中AopProxy, 用了JDK动态代理和CGLIB的字节码生成技术。\nSpring框架IOC（ioc是设计思想、依赖注入是具体实现）原理以及用到的设计模式，应用场景IOC带来的好处是什么，将对象的控制权和生命周期交给IOC容器，那么这个容器的过程，以及这个对象的生命周期是什么样的IOC的目的是解耦， 项目开发中具体用到IOC是什么场景\nAOP原理以及用到的设计模式，应用场景通过切面技术对业务主体增加额外的通知（advice），从而对声明的切点（pointcut）的代码块进行统一管理和装饰。在某些方法的前后进行一些通用的操作，这些操作本身不会影响程序本身的运行。\nSpring Boot自动配置启动过程原理常用注解\nSpring Boot 与Spring Cloudspringboot 专注于快速开发单个微服务个体；SpringCloud 关注全局的服务治理框架。 将springboot开发的一些单体微服务整合并管理。 提供配置管理、服务发现、断路器、路由、全局锁、分布式会话等集成服务。\n","tags":["个人技能"]},{"title":"如何提升口语交际能力","url":"/2022/11/11/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%8F%A3%E8%AF%AD%E4%BA%A4%E9%99%85%E8%83%BD%E5%8A%9B/","content":"","tags":["个人技能"]},{"title":"MongoDB","url":"/2022/11/12/MongoDB/","content":"是什么面向文档的NoSQL数据库，用于大量数据存储。mongdo的文档结构很符合开发人员编程语言中构造的类和对象。\n为什么用\n面向文档： 数据存储在文档中，使得Mongo非常灵活，可以适应实际的业务环境和需求。\n负载均衡：使用分片的概念，通过多个mongo实例之间拆分数据来水平扩展。可以在多台服务器上运行，以平衡负载或复制数据，以便在硬件出现故障时保持系统正常运行。\n\n集合文档的分组，集合等效于RDBMS中创建的表。集合存在于单个数据库中。\n文档集合的记录。文档包含字段名称和值。mongo将数据存储为一个文档，类似于JSON对象数据由键值对组成，类似于Java的Map\n字段字段包含名称和值。一个文档拥有零个或者多个字段。 字段类似于关系数据库中的列。\n怎么用mongoDB 为了web提供可扩展的高性能数据存储解决方案\n","tags":["数据库"]},{"title":"MySQL","url":"/2022/11/12/MySQL/","content":"数据类型\n字段类型\n整型  TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT\n浮点数  FLOAT、DOUBLE、DECIMAL\n字符串  CHAR、VARCHAR\n时间和日期\n\nDATETIME （1001-9999年）\n\n\n\nTIMESTAMP（从1970.1.1开始的秒数）\n\n\n\n\n\n\n\n常用语法规则与编程技巧多表联查方法：内连接、左外连接、右外连接、全外连接、笛卡儿积外连接就是 查询出相交的部分，还有左边表独有的部分。\nSQL优化常用方法及场景存储引擎\nInnoDBMySQL默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。\n\nMyISAM不支持事务\n\n\n事务索引 B+数\n数据结构特点\n与红黑树的区别\n\n分库分表主从复制备份与恢复数据库安全\n策略\n管理\n\n","tags":["数据库"]},{"title":"旅行项目","url":"/2022/11/12/%E6%97%85%E8%A1%8C%E9%A1%B9%E7%9B%AE/","content":"为什么做这个想把旅行的一些经历和想法记录下来。\n项目架构与模块\n项目技术栈基于SpringBoot的单体项目，spring security、JPA、MySQL、JWT业务类、登录与注册、认证与授权、数据存储\n\n项目流程注册流程登录流程\n\n\n授权与认证流程\n数据操作流程\n项目遇到的问题项目亮点","tags":["项目经验"]},{"title":"微服务项目","url":"/2022/11/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE/","content":"为什么做这个为了尝试与学习微服务技术栈（感兴趣所以就尝试去做了）\n项目架构项目技术栈SpringBoot、SpringCloud gateway、注册中心Eureka、Prometheus系统监控、Docker容器化\n网关的登录与路由、服务注册与发现、应用容器化、系统监控\n流程网关路由流程服务注册中心流程容器化过程系统监控流程\n项目遇到的问题项目亮点","tags":["项目经验"]},{"title":"Java面试题","url":"/2022/11/13/Java/","content":"继承\n访问权限\n接口与抽象类\nsuper\n重写与重载\n\n抽象类抽象类 和抽象方法 需要用abstract 关键字声明。 抽象类一般包含抽象方法。抽象类和一般类的区别在于抽象类不能被实例化。\npublic abstract class AbstractClassExample &#123;    protected int x;    private int y;        public abstract void func1();        public void func2() &#123;        System.out.println(&quot;func2&quot;);    &#125;&#125;public class AbstractExtendClassExample extends AbstractClassExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;// AbstractClassExample ac1 = new AbstractClassExample(); // &#x27;AbstractClassExample&#x27; is abstract; cannot be instantiatedAbstractClassExample ac2 = new AbstractExtendClassExample();ac2.func1();\n\n使用抽象类：\n\n需要多个相关的类中共享代码。\n需要能控制继承来的成员的访问权限，并不都是public。\n需要继承非静态和非常量字段。\n\n接口接口是完全抽象的类，在 Java8之前， 就是不能有任何的方法实现在Java 8开始，接口可以拥有默认的方法实现，因为不支持默认方法的接口维护成本太高了。\n接口的成员（字段+方法）都是默认public，并且不允许定义为Private 或 protected。\n接口的字段默认都是 static 和 final 的。\npublic interface InterfaceExample &#123;    void func1();    default void func2()&#123;        System.out.println(&quot;func2&quot;);    &#125;    int x = 123;    // int y;               // Variable &#x27;y&#x27; might not have been initialized    public int z = 0;       // Modifier &#x27;public&#x27; is redundant for interface fields    // private int k = 0;   // Modifier &#x27;private&#x27; not allowed here    // protected int l = 0; // Modifier &#x27;protected&#x27; not allowed here    // private void fun3(); // Modifier &#x27;private&#x27; not allowed here&#125;public class InterfaceImplementExample implements InterfaceExample &#123;    @Override    public void func1() &#123;        System.out.println(&quot;func1&quot;);    &#125;&#125;// InterfaceExample ie1 = new InterfaceExample(); // &#x27;InterfaceExample&#x27; is abstract; cannot be instantiatedInterfaceExample ie2 = new InterfaceImplementExample();ie2.func1();System.out.println(InterfaceExample.x);\n\n使用接口\n\n需要让不相关的类都实现一个方法，例如不相关的类都实现Comparable接口中的compareTo()；\n想要确定特定数据类型的行为，但是不关心谁实现这个行为。 \n需要使用多重继承。\n\n抽象类与接口区别使用上来说，一个类可以实现多个接口，但是不能继承多个抽象类。接口的字段 只能是static 和final类型，抽象类没有限制。接口成员只能是public，抽象类成员可以有多种访问权限。\n选择：很多时候，接口优于抽象类，因为接口没有抽象类严格的类层级结构要求，可以灵活为一个类添加行为。 并且从Java8开始，接口也可以有默认的方法实现，使得修改接口的成本很低。\n重载和重写重写（override）发生在继承关系中，子类实现父类方法声明完全相同的方法。为了满足里氏替换原则有两个限制：\n\n子类方法的访问权限必须大于等于父类方法。\n子类方法的返回类型必须是父类返回类型或者其子类型。\n\n使用@Override注解，可以让编译器帮忙检查是否满足以上两个条件。\n重载（overload）存在于同一个类中， 一个方法与已经存在的方法名称上相同，但是参数类型、个数和顺序至少有一个不同。但是 返回值不同，其他都相同不算重载。\n","tags":["Java"]},{"title":"Java常见的异常","url":"/2022/11/13/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8/","content":"常见异常类型\nNullPointerException 空指针异常\nArrayIndexOutOfBoundsException 索引越界异常\nInputFormatException输入类型不匹配异常\nSQLException SQL异常\nIllegalArgumentException 非法参数异常\nNumberFormatException 类型转换异常\n\n异常解决方法Java内建了通用的异常，以Throwable为顶层父类。Throwable派生出Error和Exception类。\nError：Error类以及子类的实例，代表JVM本身的错误，不能被程序员通过代码处理。Exception：Exception以及子类，代表程序运行时发送的各种不期望发生的时间。可以被java异常处理机制使用，是异常处理的核心。\n处理方法\ntry catch\ntry&#123;// 程序代码&#125;catch(ExceptionName e1)&#123;//Catch 块&#125;\n\nthrowthrow 关键字作用是抛出一个异常，抛出时候是抛出一个异常类的实例化对象，在异常处理中，try语句捕获的就是一个异常对象，那么异常对象也可以自己抛出。\n\nthrows定义一个方法的时候可以用throws关键字声明。使用throws关键字声明的方法表示此方法不处理异常，而交给方法调用着进行处理。\n\n\n","tags":["Java"]},{"title":"Java数据类型","url":"/2022/11/13/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"大分类基本数据类型 8个， 引用类型 3个\n基本数据类型\nbyte（8）、short（16）、int（32）、long（64） 属于数值型中的整数型\nfloat（32）、double（64）属于浮点类型\nchar（16） 属于字符型\nboolean（1） 属于布尔型\n\n引用数据类型类、接口、数组\n包装类java的8个基本数据类型，分别对应8个包装类，包装类型和基本类型之间的赋值通过自动装箱与拆箱完成。\n\nbyte – Byte\nboolean – Boolean\nshort – Short\nchar – Character\nint – Integer\nlong – Long\nfloat – Float\ndouble – DoubleInteger x = 2;     // 装箱int y = x;         // 拆箱\n\n为什么要包装类\n基本数据类型简单，但是不支持泛型和集合。\n不符合面向对象思维。\n包装类提供很多方法，方便使用。如：Integer类toHexString（int i）、parseInt（String s）等。\n\n","tags":["Java"]},{"title":"Linux与shell脚本","url":"/2022/11/12/Linux%E4%B8%8Eshell%E8%84%9A%E6%9C%AC/","content":""},{"title":"计网应用token、cookie和session","url":"/2022/11/12/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8token%E3%80%81cookie%E5%92%8Csession/","content":"session 和cookie 和token分别是什么session 是基于Cookie实现的一种记录服务端和客户端会话状态的机制。Session存储在服务端。 SessionID 会被存储在客户端的Cookie中。\nsession 和cookie 和token分别为什么cookie在HTTP&#x2F;1.1 引入cookie来保存状态信息，使得http协议尽可能的简单。随着现在浏览器的存储方式，cookie逐渐被淘汰。\nsession 和cookie 和token应用场景cookie\n\nsession management 会话管理登录、购物车、游戏分数等 任何服务器来存储的数据 \npersonalization 个性化用户偏好、主题 和其他设置\ntracking 跟踪记录和分析用户行为\n\nsession 和cookie 和token区别","tags":["项目开发"]},{"title":"Java对象引用","url":"/2022/11/15/Java%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/","content":"什么是引用数据类型引用数据类型是 在创建的时候，会先在堆内存中分配一块空间，存储对象的具体信息，然后在栈中存储该对象的地址信息。\n引用的类型\n强引用  垃圾回收器不会回收被引用对象，哪怕内存不足，JVM会直接抛出OutOfMemoryError，除非赋值为null；\n软引用  描述一些非必需但仍有用的对象。在内存足够时，软引用不会回收，只有在内存不足时，系统回收。\n弱引用  无论内存是否足够，只要JVM进行垃圾回收，那些被弱引用的对象都会被回收。\n虚引用  主要用来跟踪对象被垃圾回收器回收的活动。  无法通过虚引用来获取对象。虚引用必须和（ReferenceQueue）引用队列一起使用，NIO的堆外内存就是靠其管理。\n\n","tags":["Java"]},{"title":"Java常用集合与实现","url":"/2022/11/15/Java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E4%B8%8E%E5%AE%9E%E7%8E%B0/","content":"HashMap\n1.8版本的变化\n\n\n加入红黑树\n插入数据方式变为尾插法、\nhash值计算方式变为2次扰动处理（1次位运算+1次异或）\n扩容策略变化，插入后再扩容\n\n\n线程不安全：1.7中，扩容采用头插法，可能出现循环链表，为了修复改为尾插法。HashMap任意版本中，如果在插入数据时多个线程命中了同一个槽，可能数据覆盖的情况，导致线程不安全。\n\n线程不安全解决方案\n\n给HashMap直接加锁\n使用Hashtable，比方法1效率高，原理是在方法上加Synchronized锁\n使用concurrentHashMap，本质是减小了锁的粒度，减少线程竞争，更高效。\n\n\n与concurrentHashMap的区别\n\nConcurrentHashMap版本区别：\n\n1.7 锁粒度 基于segment  1.8基于entry节点\n1.7锁用reentrantLock   1.8用synchronized\n底层结构1.7 segment  + HashEntry + Unsafe  ； 1.8 Synchronized + CAS + Node + Unsafe\n\nArrayList &amp; LinkedList（双向链表）\n对于随机访问，ArrayList 优先，因为基于数组实现，存储空间连续，支持随机访问\n对于新增和删除数据，LinkedList优先，因为ArrayList要移动数据。\n同样数据量LinkedList所占空间更小，ArrayList需要预留空间便于后续数据增加，而LinkedList只需要增加一个节点。\n\nHashSetset继承于Collection接口，不允许出现重复元素，并且无序。HashSet基于HashMap实现，底层用HashMap保存元素。元素哈希值通过元素hashcode方法来获得，首先判断hashcode，之后判断equals，如果都相同视为同一个元素。\n","tags":["Java"]},{"title":"Java对象的生命周期","url":"/2022/11/15/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":""},{"title":"Java版本特性","url":"/2022/11/15/Java%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/","content":"1.8函数编程（lambda表达式）\n11将提供长期支持服务，将作为Java默认支持版本。指导2023年9月从8 到 11\n\n语言新特性\n新工具和库更新\nJVM优化\n\n","tags":["Java"]},{"title":"Spring中Bean的生命周期","url":"/2022/11/15/Spring%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":"Bean初始化的大致4个阶段\n实例化（instantiation）\n属性赋值（populate）\n初始化（initialization）\n销毁（destruction）\n\n涉及到的扩展点的作用\nAware接口通过让Bean实现Aware接口，在bean中获取响应的Spring容器资源。\nBeanPostProcessor是Spring修改Bean提供的强大扩展点，可作用于容器中所有Bean。\n\n","tags":["Spring"]},{"title":"动态代理与反射","url":"/2022/11/15/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/","content":"反射什么是反射？哪里用到了反射？怎么用的？反射原理？\n","tags":["Java"]},{"title":"如何准备一场视频面试","url":"/2022/11/15/%E5%A6%82%E4%BD%95%E5%87%86%E5%A4%87%E4%B8%80%E5%9C%BA%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95/","content":"搜集相关问题及解决方案组织回答问题的语言模拟面试录像，对回答问题的形式和内容进行修正和补充。\n修正与补充重复以上步骤","tags":["技巧"]},{"title":"认证与授权","url":"/2022/11/15/%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/","content":"链接https://javaguide.cn/system-design/security/basis-of-authority-certification.html#%E8%AE%A4%E8%AF%81-authentication-%E5%92%8C%E6%8E%88%E6%9D%83-authorization-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\n","tags":["软件开发理解"]},{"title":"JVM","url":"/2022/11/16/JVM/","content":"JVM 、JRE和JDK\nJVM  java运行在虚拟机上，在不同的平台上有不同的虚拟机，从而实现跨平台。\nJRE  java运行环境，包含JVM和核心类库，如lang包：系统类、包装类型、基本数学函数、字符串处理、线程、异常处理类等。 如果只要运行java，安装JRE就行。\nJDK  包含JRE和一些开发工具，如JAVA.exe、JAVAc.exe、Jar.exe java运行、编译和打包工具等。\n\n工作过程作用 ：首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的解释器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\n\n内存模型（深入理解）线程私有：栈、本地方法栈、程序技术器线程共享：堆、方法区\n类加载机制（了解）GC（了解）内存可见性","tags":["Java虚拟机"]},{"title":"how to add a feature?","url":"/2022/11/19/how-to-add-a-feature/","content":""},{"title":"how to build a feature?","url":"/2022/11/19/how-to-build-a-feature/","content":"Documentations\nunderstand the project structure and parrterns.\ncode standards and best practices.\n\nRun the project\ntry to use the project, try the existing functions.\n\nUnderstand the features\nlearn about the feature’s requirements.\n\nUnderstand the structure of code\nto figure out where(which package, which layer) your feature’s code belong to.\n\n","tags":["软件开发理解"]},{"title":"hexo 与 分布式文件系统","url":"/2022/11/24/hexo-%E4%B8%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","content":"分布式特点：并行处理：多台机器同时处理同一功能节点可以访问系统中其他节点并与之通信。\n微服务微服务是分布式系统，将应用分解为单独的组件或“服务”。系统拥有服务的多个冗余副本，服务不会出现集中故障点。更具组合型，可以重复利用小型服务节点提供的功能。微服务更加稳健，可实现更灵活的的垂直和水平扩展。\n","tags":["分布式"]},{"title":"hashcode 和 equals","url":"/2022/11/20/hashcode-%E5%92%8C-equals/","content":"为什么要重写方法默认的hashcode 和 equals方法都是继承自Object类中。equals方法去判断两个对象引用的地址是否相同。\n在一般情况中，比如创建了两个用户对象，参数相同的情况下，equals方法对比，结果为false。因为是new出来的两个对象，引用指向的地址一定不同，所以equals结果为false。\nhashcode也不同。 放入map或者set中时，两个相同的对象，却会重复出现两次。违背了map和set的特性。本来想要像个相同的对象判断成了不同的对象，为了达到目的，让我们认为两个相同的对象判断也是同一个对象，所以需要重写原来的hashcode和equals方法。\n原因：set根据hashcode 是否相同，在判断equals是否相同来判断是否为同一个对象。map根据key值的hashcode值分配和获取对象保存数组下标，然后根据equals判断是否唯一。\n什么时候重写如何重写只重写equals方法也不行，因为在集合中判断两个对象是否相同时，会用到hashcode方法，所以重写equals同时也要重写hashcode方法。\n","tags":["Java"]},{"title":"数据库","url":"/2022/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"事务ACID特性事务是由一系列数据库操作组成的一个完整的逻辑过程。如银行转账。一个完整的逻辑过程，不可拆分，这个过程叫事务。 具有ACID特性。\n\n原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成。\n一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。\n隔离性：隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。\n持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n事务隔离的级别：（）\n\n读未提交（Read uncommitted）：脏读、不可重复读、幻读都可能出现\n读提交（read committed）： 可以避免脏读。\n可重复读（repeatable read）：避免脏读、不可重复读，但是会幻读。\n串行化（Serializable）：性能很低、事务顺序执行、避免脏读、不可重复读、和幻读问题。隔离级别从低到高，性能逐渐减低、但是事务数据一致性增高。\n\n脏读、不可重复读、幻读\n\n脏读：事务2查看了事务1未提交的更新事务，结果事务1回滚了，就是脏读。\n幻读:  事务2在事务1的两次查询之间插入了新的值，导致两次数据（条数、量）不一致。\n不可重复读：事务2在事务1的两次查询之间更新了新的值，导致查询结果不一致。\n\n手写常用语句条件查询关联查询排序查询分组查询逻辑关键字常用函数（count、sum、order by）\n数据类型整数型浮点型字符串二进制时间\n存储引擎（特点）MyIASM      支持全文检索，查询效率高；  不支持事务， 使用表级锁InnoDB        支持ACID事务，支持外键、行级锁， 使用行级锁，提高了并发效率\n锁\n表锁粒度大，锁冲突几率大，\n行级锁锁的粒度小，并发冲突几率低，并发效率高\n共享锁\n排他锁\n\n索引大幅增加数据库的查询性能，需要额外的空间来存储索引，适合应用到读多写少的场景。\n\n类型：\n\n\n唯一索引\n\n主键索引 不允许空值\n\n普通索引\n\n联合索引 注意最左原则\n\n全文索引 （MyISAM）  5.6版本之后 InnoDB也实现了全文索引\n\n\n\n索引实现\n\n\nB-Tree\nR-Tree\nHash  散列表 效率高，但不支持范围查找，实际使用较少。\nFullText 记录关键字与对应文档的倒排索引\n\n存储过程与函数避免重复编写语句\n\n存储过程\n\n函数\n\n\n新特性（8.0）隐藏索引、通用表表达式、窗口函数（）\n优化\n表结构与索引\nSQL语句优化\n参数优化\n硬件及系统配置优化成本逐渐升高，但是优化效果 逐渐降低\n\n\n表结构与索引优化\n\n\n分库分表，读写分离\n为字段选择合适的数据类型， 尽可能小\n字段多的表分解成多个表\n为经常使用查询的创建索引\n列字段尽量设置not null\n\n\nSQL语句优化\n\n\n找到最需要优化的查询语句：使用频率最高、优化后提高最明显的语句。（分析慢查询日志）\n使用分析工具：explain、profile\n避免使用Select * ，指定需要获取的字段（避免查询列字段的元信息）\n尽量使用prepared statements （性能更好、防止SQL注入）\n使用索引扫描来排序\n\n","tags":["计算机基础"]},{"title":"操作系统","url":"/2022/11/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","content":""},{"title":"英语学习心得","url":"/2022/11/24/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/","content":"前言英语学习 和其他很多学习一样， 持之以恒，每天学一点，当天不会感觉到什么，当坚持做了很久之后，就会感觉到自己能听懂了， 自己能读好了， 自己能说出来了， 自己能运用。\n","tags":["英语"]},{"title":"计算机网络","url":"/2022/11/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","content":"4&#x2F;7层模型TCP 协议\n基于链接 （点对点）\n双工通信\n可靠传输（基于字节流，将数据按字节大小进行编号，接收端通过ACK来确认收到的数据编号，通过这种机制，保证接收数据的有序性和完整性。）\n流量控制，滑动窗口控制数据的发送速率，滑动窗口的本质是数据的动态缓冲区，接收端根据自己的接收能力在Header中动态调整窗口大小，通过ACK应答包通知给发送端，发送端根据窗口的大小调整发送的速度。\n拥塞控制： （四个算法：慢启动、拥塞避免、拥塞发生、快速恢复）报文状态三握四挥keepalive滑动窗口 进行流量控制\n\nHTTP协议：Method、Header、Cookies状态码HTTPS 交互流程HTTP 2.0  多路复用、Stream、流量控制、服务端推送\nUDP","tags":["计算机基础"]},{"title":"编译原理","url":"/2022/11/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/","content":""},{"title":"分布式系统","url":"/2022/11/26/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/","content":""},{"title":"Distributed System Engineering lecture 1","url":"/2022/11/30/Distributed-System-Engineering-lecture-1/","content":"what is this lecture all  about？big view on the distrubuted system,consistency-performance-fault tolerance\na study case on MapReduce about how it works, \n","tags":["distributed system"]},{"title":"ToDoList","url":"/2022/12/31/ToDoList/","content":"为什么做用来记录和规划每天要做什么事情，更高效的完成想要去做的事情。\n项目架构前后端分离- 后端：SSM + MySQL\n项目模块后端模块设计：\n\n用户注册与登录\n话题模块\n任务模块\n\n项目中遇到的问题Description:\nParameter 1 of constructor in com.example.todolist.service.AuthService required a bean of type ‘org.springframework.security.authentication.AuthenticationManager’ that could not be found.\nAction:\nConsider defining a bean of type ‘org.springframework.security.authentication.AuthenticationManager’ in your configuration.\n找不到对应的Bean，但是这个Bean是在Security包中的。\n项目亮点技术亮点业务亮点业务亮点就是 每个任务会有一个预估的完成时间，用户可以去执行任务的时候开启倒计时功能，倒计时结束时，表示用户完成了任务；当用户完成一个话题的相关所有任务的时候，这个话题会进入已完成的话题列表，很有成就感。\n","tags":["项目经验"]},{"title":"CAS 原理与应用","url":"/2022/12/07/CAS-%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/","content":"CAS原理（对比 交换）优缺点应用场景","tags":["并发"]},{"title":"用户注册与登录","url":"/2022/12/31/%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%B8%8E%E7%99%BB%E5%BD%95/","content":"用户登录实现方法后端的输入与输出输入：用户名和密码、手机号和密码后端通过查询用户表对照用户输入的信息是否正确来认证用户身份。如果身份验证通过，后端给用户返回一个Token，ID，用户持有这个ID或者Token来进行接下来的系统访问操作。\n","tags":["项目开发"]},{"title":"JWT的原理与使用","url":"/2023/01/09/JWT%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/","content":"作用要用一个技术&#x2F;框架，首先是我想做一件事情，这个技术&#x2F;框架可以方便我做这件事情。所以我选择使用这个技术&#x2F;框架。JWT 用于各方之间以JSON对象安全传输信息，这些信息通过数字签名进行验证和授权。可以使用“RSA”的“公钥&#x2F;私钥对”对JWT进行签名。\n基本使用过程JWT请求过程\n\n使用使用浏览器发送用户名和密码\n服务器使用私钥创建一个JWT\n服务器返回JWT给浏览器\n浏览器将JWT串在请求头向服务器发送请求\n服务器验证JWT\n按授权规则返回资源给浏览器前3步获取了JWT之后，在JWT有效期内，直接进去4-6步来请求资源即可。\n\nJWT组成（核心概念）格式：Header、Payload、Signature三部分组成\n实例应用配置、处理注册、处理登录、多方式注册和登录\n","tags":["技术研究","项目开发"]},{"title":"认证授权框架的选择","url":"/2023/01/09/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%89%E6%8B%A9/","content":"认证授权框架因为最近在做一些项目，都是自己从头开始写登录注册，所以想着应该学习应用一下这些安全框架来实现鉴权的功能才靠谱。所以来学习这些框架技术。\n目前已经了解到的SpringSecurity， shiro。 相对来说Shiro更容易入门一些，因为shiro对于认证授权这些功能的API使用起来相对更简单一些。在国内的受欢迎程度更高一些。昨天发了一个帖子说如何选择SpringSecuriy 和 shiro，有人说这俩都是老古董了，看看新的，sa-token。\n去github搜了一下sa-Token，轻量级的，要做简单优雅的鉴权框架。\n使用体验\nSpring Security以前跟着视频学习项目的时候使用到过Security的，因为当时没有提前了解过该框架的一些核心、常用组件和基础知识，所以很多代码觉得很陌生，难以理解。（后来意识到，使用这个框架之前还是最好先了解一下框架的架构模块、核心概念&#x2F;功能、核心类库、常用方法和流程。了解了这些就不会在使用框架时一头雾水了。）\n\nsecurity的使用体验就是感觉需要大量的配置，在配置中解决问题。\n","tags":["软件开发理解"]},{"title":"最近在做什么001","url":"/2023/01/09/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%81%9A%E4%BB%80%E4%B9%88001/","content":"idea很有意思，想这之后回顾自己最近在干什么是一件很有意思的事情，于是开始记录自己最近在做什么。\n在做什么\n在技术网站上发帖子，请求一些技术问题，得到了很多回应。\n最近组建了一个项目开发的小团队，想要让自己投身到合作软件开发中。 \n因为开发的时候，我目前就是从0开始，需要做注册与登录，所以顺便需要学习一下认证与授权这种安全框架。\n\n感想与收获\n互联网是很好的学习平台，如何充分利用互联网来学习和成长是很有价值的问题。\n最近在技术网站比较活跃，所以遇到很多大佬。大佬给我的感觉：（大佬在做的事情，也是成为大佬的必经之路）\n\n\n很会包装自己，能让人快速认识这个人，很多经历，让人感觉很厉害。\n大佬通常有很多产出，也是在技术社区相当活跃的一批人，有自己的各种媒体或者github日常贡献很密集。\n大佬通常会做知识分享。\n\n","tags":["最近在做什么"]},{"title":"我常做的事","url":"/2023/01/09/%E6%88%91%E5%B8%B8%E5%81%9A%E7%9A%84%E4%BA%8B/","content":"逛技术社区因为自己打算在IT行业长期发展，所以就想着把自己学习和一些感悟什么的记录下来，这样在以后的一些时刻就可以回头来看到自己一路走来的样子。\n做着做着就把一些东西分享出来，比如学习技术，就拿出来和大家讨论，一些技术问题也会拿到技术社区去发帖子提问题。因为基本上都会得到回复，而且有时候一些人的评论和回复会很有帮助。所以逐渐的在技术社区也活跃起来了。\n了解到很多厉害的人都在技术社区里面有很多帖子或者文章来发表自己的理解和感悟。他们往往有很多产出，也认识更多厉害的人。所以我认为这是一个很有价值的事情。我要朝着这个方向发展。\n","tags":["我"]},{"title":"把握工作与生活的边界","url":"/2023/01/09/%E6%8A%8A%E6%8F%A1%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E8%BE%B9%E7%95%8C/","content":"为什么想写我很容易是没有边界感的人，生活和工作没有边界。我认为这不是好事，让我很累。最近在技术社区活跃了，就会看到很多人比我厉害，就发现很多自己可以做的事情，来提升自己，追赶他们的脚步。 但是这个差距不是一天两天能补上的，我不能把自己拿来和别人比较。这会让人心态不稳定，容易带来负面情绪。我要做的事情是把更多的注意力放在自己身上。看到自己的成长路径，看到自己想朝哪里发展，看到自己想要什么，自己需要什么，补充自己的不足，加强自己的力量。\n每个人是不一样的，我能做的是看到自己的在哪里，看到自己的能力，让自己变强，可以参考业界厉害的人，知道自己在遇到一些问题的时候如何来应对。 这样不会太累，也能让自己保持自信。\n阅读了一本书最近看到一本书《弹性习惯》 生活就像大海，不断的变化，我在生活中要面临不断变化的海浪。 那么我对自己的要求和标准就必须要灵活。这样才能应对这些变化，而不至于让变化来挫伤我。\n负面的习惯会让人陷入负面的循环，很难踏出去。我知道我想要去做一些事情，让自己活成想要成为的样子。 可是陷入负面循环的我，就是很困难去做任何改变。\n本书作者另一个著作《微习惯》。 养成习惯就是坚持做一件事情。 很多人之所以没能够坚持多久，因为他每天给自己要求做什么事情，如果没做到就惩罚自己，或者就贬低自己。这是一种外力的控制。     真正的习惯养成，自律，需要来源于自发的动力，源于自己的内部，一种源源不断驱动力，这种力量才是养成习惯，达到自律的重要的条件。  一个容易坚持的习惯，每天哪怕做很微小的事情，但是做到了就会获得成就感。 微小的事情，长期坚持、积累下来就会有明显的感觉，感觉到自己的改变。\n一个不成熟的终身学习者我认为我是一个终身学习者，我好奇心很强。我愿意学习新的东西。所以我学了很多技术。这是不够的，有天赋，可以学的很快，理解一些也许别人理解不了的东西，但是没有辛苦的训练，没有用。\n利用微习惯加弹性习惯， 帮助自己调整和培养更适合自己的学习习惯，让生活感到轻松的，让身心更健康的学习习惯和生活习惯。\n终身学习者是学习、好奇心、成长的动力会伴随他的一生。 他可以一直这么做下去，已经成为他的习惯。这本来是一个好的习惯，但是如果没有边界感，会感到疲惫，会伤身体，学习效果也没有那么好了，从而打击了学习的积极性，变得消极，不愿意学习。好的习惯却给生活带来了坏处，这就是没有边界干带来的问题。 所以我认为我现在是一个不成熟的终身学习者。  而这个问题的核心在于理清楚生活和工作的边界， 享受学习带来的乐趣，带来的成长，同时能够感受到学习改善了我生活，从而让我更好的享受生活。 学习是为了更好的生活，终身学习更是为了更好的生活。\n","tags":["思路总结"]},{"title":"2023年技术学习计划","url":"/2023/01/09/2023%E5%B9%B4%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","content":"起源想起来写这个年度计划，因为最近常常活跃在技术社区，看到很多人记录博客和分享。 今天早上在GitHub个人主页上写下了今年想要学会的技术。于是想这就在这里规划一下自己这一年的小目标，到时候看看自己能做多少。增加点乐趣。\n职业规划目前来说还没有入行，没有接触过真实的企业开发是什么感觉。 对于技术的运用呢，就自己做一点demo，最近开始和一些朋友一起做实践项目玩一玩。 能简单使用尽可能简单。\n对于技术的学习比较认同之前遇到一个面试官给到的建议：觉得现在的技术不足以解决遇到的问题的时候，就是学习使用新技术的时候。 另外一个就是去学习、探索自己感兴趣的技术。\n对于目前处于小白阶段的我，后端技术栈虽然没有所有的技术都体验一遍，但是大体上一个完整的项目开发生态系统已经基本有过使用的体验了。 像很多人一样，我对自己的规划就是在入行初期主要发展自己的广度，让自己有更多发展的可能性。 也许遇到很感兴趣的东西，自己深入研究，实力允许的情况下就可以专心在那个专业领域去发展了。\n我对于技术广度的看法技术广度就在于今天做项目要开发一个需求，可能遇到了不那么熟悉的领域&#x2F;技术，但是我了解这种场景我可以使用到什么技术，可以参考哪些业界的实现方案。\n所以得到广度的两种角度： 一个是技术栈的广度，另外一个是经典场景问题的解决方案。\n\n技术栈的广度\n\n\n对于一个新技术的学习我目前的理解是 需求驱动。我项目中需要鉴权这个功能，那么我可以采用安全框架， 选择好了框架之后，我需要了解这个框架的核心概念（这些核心概念如何对应到我的功能里面），框架的工作原理（这些核心概念是如何配合起来解决问题的）、框架核心模块（框架这些核心功能都是哪些模块提供的），实例应用（动手实现等细节问题）。 掌握了这4个点，我认为自己对于这个技术框架有了一些了解了， 剩下就是在使用中积累，也许阅读源码来加深理解去更好的应用这个技术框架。\n\n\n经典场景的实现方案\n\n","tags":["我","个人技能"]},{"title":"英语学习工具","url":"/2023/01/11/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/","content":"学习软件最近用的一款软件 叫多邻国，这个软件给人的感觉就是学习英语像是在玩游戏。软件中带有一套激励系统。 激励用户不断的去完成任务，使用软件。 这对用户和软件来说是双赢。\n学习过程中会不断的得到鼓励、学习完之后会得到积分奖励、会获得经验值，经验值会拿来排名，排名靠前的会升级段位。\n针对性练习想要学得快，针对性训练很重要， 前几天学到一个思想，就是输出会带动输入。 所以针对目标，使用英语，这样就知道自己需要什么，不足在哪里，再针对性的学习和补充。\n","tags":["英语"]},{"title":"我现在的技术水平1/11","url":"/2023/01/11/%E6%88%91%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%B0%B4%E5%B9%B3001/","content":"为什么写因为回看自己的技术水平，会看到自己这一段时间的进步，不管进步多少，可以算是对自己这一段时间的一个反思和总结。调整或保持自己的节奏。\n开发技术这段时间因为和朋友一起做项目，开始触及到了一些知识盲区， 根据需求去学习确实很有动力和效率。还有一点就是感受到了 技术的长进是一点一滴的积累。所以在职业生涯中也要注重意识和思想的成长积累。 不然就感觉自己进步很慢，产生焦虑感。\n回到正题， 目前专心于Java开发， 在项目中很少用到Java语言的一些特性，说明项目做的太浅了。最近项目涉及到了一些Java集合的知识，所以就想Java特性还是要再熟悉一下。反复回顾。\n目前Java学习技术栈技术栈是很经典的，网上学习资料的集合体：Java、MySQL、Spring、SpringMVC、SpringBoot、MyBatis、MyBatisPlus这些是开发中常用的技术\nRedis、MongoDB、RabbitMQ、SpringCloud、SpringSecurity、Zookeeper、Ngnix、Docker、JPA、React这些是学习过，写过DEMO的技术\n了解但没用过：Dubbo、K8s、Shiro、ElasticSearch、Solr、ELK\n看过源码：Java（基础类库、集合、并发）深入学习过原理：Java、MySQL、Spring、SpringMVC\n掌握一个技术的标准了解其应用场景、核心概念、工作原理&#x2F;流程、核心模块、实例、将它用到项目中。\n","tags":["我","个人技能"]},{"title":"不知道要做什么的时候应该做什么","url":"/2023/01/11/%E4%B8%8D%E7%9F%A5%E9%81%93%E8%A6%81%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84%E6%97%B6%E5%80%99%E5%BA%94%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88/","content":"为什么写最近把上一个项目基本上是做完了初始版本，后续就是维护和优化了。目前不知道要干啥，觉得做事情要找到动力，所以想找到一个理由，让自己有动力去做事情。\n回顾归去、看未来不知道要做什么的时候，就去看之前的收藏夹，就去看之前写的文章和博客，就看看以前的东西。不知道要做什么的时候，就去想想未来想成为什么样的人，想做什么样的事情，就知道自己该干什么了。\n","tags":["最近在做什么"]},{"title":"读书项目开发流程","url":"/2023/01/11/%E8%AF%BB%E4%B9%A6%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/","content":"项目开发规划前端 做小程序后端未知，先做前端\n前端项目流程模块开发计划：\n\n用户登录&#x2F;注册\n读书管理子系统 （对读书的增删改查）\n\n目前状态： 学习微信小程序开发流程\n后端开发流程数据库设计\nSpringBoot开发插件MyBatis-X\n","tags":["项目经验","项目开发"]},{"title":"我的常用的开发工具","url":"/2023/01/11/%E6%88%91%E7%9A%84%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","content":"操作系统\nWindows\nLinux（Ubuntu）\n\nIDE 开发环境Intelli J IDEA\n包管理工具Maven\n项目管理工具Trello\n代码托管平台\nGitHub\nGitee\n\n设计文档工具\nProcessOn\n腾讯文档\nNotion\n\n","tags":["我","个人技能"]},{"title":"做一个独立开发者","url":"/2023/01/11/%E5%81%9A%E4%B8%80%E4%B8%AA%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E8%80%85/","content":"难题想做一个独立开发者，对于后端程序员来说，跨不过去的坎，就是要学会前端开发。\n为什么做一个独立开发者我有很多idea想要做出来，做成软件看看，但是奈何没怎么花心思去学习前端技术，所以往往是实现不了，前端一写就废。 学会前端是一种信心的建立。\n"},{"title":"如何学习新的开发技术/框架","url":"/2023/01/11/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E7%9A%84%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF-%E6%A1%86%E6%9E%B6/","content":""},{"title":"打怪升级","url":"/2023/01/11/%E6%89%93%E6%80%AA%E5%8D%87%E7%BA%A7/","content":"技术的深入技术的深入 从了解应用场景、了解核心概念-工作原理-了解核心模块-实践\n行业的认知","tags":["职业发展"]},{"title":"MybatisPlus","url":"/2023/01/12/MybatisPlus/","content":"为什么mybatisplus 为mybatis只做增强，不做改变，简化开发。只需要少量的配置即可实现单表大部分的CURD操作。\n核心模块boot-starter 启动器annotation 注解core 核心extensiongenerator 生成器\n","tags":["数据库","项目开发"]},{"title":"H2数据库","url":"/2023/01/12/H2%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"为什么用本身是一个类库，可以直接嵌入到项目中。可以和应用程序打包一起发布，方便存储少量结构化数据。只有一个Jar文件，适合作为嵌入式数据库使用。功能完整，支持标准SQL和JDBC。\n","tags":["数据库"]},{"title":"SpringBoot参数校验","url":"/2023/01/13/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/","content":"为什么接口的查询参数后台需要进行校验，同时还需要给出校验的返回信息放到统一封装的结构中。\n如果在controller中直接校验需要用大量的if else做判断。Java API规范（JSR303）定义了Bean的校验标准validation-api。 hibernate validation是对这个规范的实现。增加了注解@Email、@length等。 Spring Validation是对hibernate validation的二次封装，用于支持Spring MVC参数自动校验。\n","tags":["项目开发"]},{"title":"SpringBoot常用注解","url":"/2023/01/13/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/","content":"@RestController组合@Controller 和@ResponseBody，用于和一个页面交互数据的控制。\n@RequestMapping(“&#x2F;api&#x2F;copper”)用来映射web请求（访问路径和参数）、处理类和方法。可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径。\n@RequestParam获取request请求的参数值\n@Bean定义在方法上，在容器内初始化一个bean实例类。\n@Component泛指组件，当组件不好归类的时候，用这个注解。\n@PathVariable用来获取请求url中的动态参数\n@Autowired在默认请求下，@autowired注释进行自动注入时，Spring容器中匹配的候选Bean数目必须有且只有一个。当找不到一个匹配的Bean时，Spring容器将抛出BeanCreationException异常，并指出必须至少拥有一个匹配的Bean。不确定Spring容器中一定有某个类的Bean，使用@autowired（required &#x3D; false），这样找不到匹配的Bean也不会报错。\n@Configuration表示这是一个配置信息类。\n","tags":["项目开发"]},{"title":"SpringBoot统一异常处理","url":"/2023/01/13/SpringBoot%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","content":"为什么如果不统一处理异常，那么controller层每个接口会有大量异常处理的代码。\n方案通过@controllerAdvice异常统一处理，这样controller中接口就无需处理异常。\n","tags":["项目开发","SpringBoot"]},{"title":"SpringBoot统一接口封装","url":"/2023/01/13/SpringBoot%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/","content":"为什么统一返回方便前端进行开发和封装，数据+响应编码+信息。\n状态码封装包含responseCode 和 description。\n返回内容封装公共接口返回时间、状态status、消息message、数据data\n接口返回时调用接口返回时，调用内容封装\n","tags":["SpringBoot"]},{"title":"日志框架","url":"/2023/01/12/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/","content":"logbackSpringBoot项目的日志标配\n","tags":["项目开发"]},{"title":"Why English","url":"/2023/01/14/Why-English/","content":"\nFirstly i will record totally in English.\nEnglish learning is a life long journey.\nEnglish is my second language.\nI want to work for a international company.\nKeep writing.\n\n","tags":["English"]},{"title":"我的书单","url":"/2023/01/14/%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/","content":"Spring开发《Spring 技术内幕》《深入实践SpringBoot》《SpringCloud微服务框架开发实战》《SpringBoot实战派》\n提升《程序员修炼之道：从小工到专家》《代码大全》《黑客与画家》\n数据库《MySQL技术内幕：SQL编程》《深入浅出MySQL：数据库开发、优化与管理维护（第2版）》《MySQL必知必会》《Redis设计与实现》\nJava《Java编程的逻辑》《Java编程思想（第4版）》《Java高并发核心编程（卷2）：多线程、锁、JMM、JUC、高并发设计模式》《实战Java高并发程序设计（第2版）》《NIO与Socket编程技术指南》\n计算机基础《程序是怎么跑起来的》《图解HTTP》《网络是怎样连接的》《编码：隐匿在计算机软硬件背后的语言》《UNIX编程艺术》《30天自制操作系统》\n","tags":["我","阅读"]},{"title":"技术阅读","url":"/2023/01/14/%E6%8A%80%E6%9C%AF%E9%98%85%E8%AF%BB/","content":"为什么之前了解到开发项目中，一般更多的不熟悉就看视频，熟悉的看文档，更熟悉的看源码。不看书是因为一般出书的周期比较长，所以看到书的时候，书里的技术都没有那么新了，容易跟不上时代。\n但是今天回过头来看，很多书写的内容是很经典的。他的内容往往体现出深邃的思想，对技术的理解。这些东西不容易从文档或博客中获得。需要一定的沉淀。而广泛流传的经典书籍都总结的很精华的思想，往往在第一遍不能理解透彻，需要多读，实践，之后再度，才能理解其奥妙。\n大学计网老师说你们想学好这门技术，就读10遍书。我觉得这不是确定的数字，但是可以明确知道，要掌握好，理解透彻这门技术，需要不断的研读经典著作，学习领域最顶尖人才的思想，自己也要勤于动手实践和总结。\n所以得出，keep reading。 虽然现在开发技术比较菜，通常跟着视频学习能够学到更多的东西，但是也不能忘记仰望星空。去看看领域最顶尖的人，他最什么事情，他的思想，他的实践方式，从而不再迷茫。\n鼓励自己，talent without working is nothing. 看看这个星球上最好的运动员，他们天赋异禀，但是同时很少有人能像他们一样刻苦的训练。\n","tags":["阅读"]},{"title":"Tomcat","url":"/2023/01/14/Tomcat/","content":"如何设计一个web容器思路比具体实现更重要。 学习把重点放在顶层设计。学习一项技术，需要了解其完整的体系。看完一本书或者一个教程，获取完整的基础知识。\nweb容器提供两种服务，\n\n静态资源的访问 （三个组件，request、HttpServer、Response）直接通过访问根路径 + 静态资源名称访问\nservlet的访问在访问根路径上加上servlet路径来做区分，将这类的请求委托给ServletProcessor来处理。\n\nServlet为了java实现动态可交互网页，web编程的一套标准。\n核心功能：\n\n创建并填充Request对象，URI、参数、Method、请求头Header,请求体body等信息\n创建response对象\n执行业务逻辑，将结果通过Response的输出流传到客户端。\n\nServlet没有main方法，所以执行需要一个容器，容器为了支持Servlet的功能而存在。 Tomcat就是一个Servlet容器的实现。\nTomcat整体架构组件角度：\n\nServer：服务器，启动和停止系统。一切包含在Server中。\nService：服务，Server可以运行多个服务。\nContainer: 容器，servlet容器。 engine（引擎）、host（主机）、context（上下文）、wraper（包装器）都继承自Container接口，所以它们都是容器。\nConnecter：连接器，service和container连接起来。把客户端的请求转发到Container（容器）。\n\n一次完整的请求角度客户端的请求http://localhost:8080/test/index.jsp，\n\n发送到本地端口，被侦听的Connector获取，然后 \nConnector将请求交给它所在的Service的engine来处理，等待Engine来回应；\nengine获取请求，匹配到所有虚拟主机Host，交给host匹配到路径为&#x2F;Test的Context去处理，\nPath&#x3D;&#x2F;test的Context获取请求index.jsp，Mapping table中对应寻找servlet。\nContext匹配到对应的JspServlet,构造HttpServletRequest和HttpServletResponse对象，作为参数调用JspServlet的doGet和doPost方法。\nContext将执行完的HttpServletResponse返回给host\nhost将HttpServletResponse对象返回给Engine\nEngine将HttpServletResponse对象返回给Connector\nConnector把HttpServletResponse对象返回给客户browser\n\n","tags":["中间件"]},{"title":"项目开发idea","url":"/2023/01/14/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91idea/","content":"clone the famous appthe software that i want to use\n读书（记录阅读记录）\ntodolist（记录要做的事情）\n旅行记（记录旅行中的事情）\n技术学习软件（想玩游戏一样学习技术，可以选择学习路线，做完一个任务获取经验，不断升级，初学者可以对技术学习有一个完整的认知，有基础的可以更深入的理解技术，提升能力）。\n技术学习平台（可以提供学习辅导，可以获得学习帮助，获取学习资源、自发的用户，免费的平台。）\n外语学习软件（根据自己目前的需求有选择的学习，学习最直接能得到帮助的内容。）\n定时任务（每日签到，消息推送-没完成的todolist等，提前通知自己在日历中的计划）\n\nsolve the real world problem\n生产消费者问题（利用队列）\n自制操作系统\n自制虚拟机\n路由器\n\n","tags":["软件开发"]},{"title":"Redis","url":"/2023/01/15/Redis/","content":"为什么高并发系统，不可或缺的是缓存。目前使用广泛、高效的一款开源缓存。\n应用场景\n缓存（数据查询、短连接、新闻内容、商品内容等）\n分布式会话（session）\n列表\n任务队列（秒杀、抢购、12306等）\n排行榜\n访问统计\n数据过期处理（精确到毫秒）\n\n基础与数据类型所有key都是String（字符串）。数据类型是说存储值的类型。\n\nString （可以是字符串、整数或浮点数）\nList（链表，每一个链表都包含一个字符串）\nSet（字符串的无序集合）\nZset（对字符串成员和浮点数分数之间有序映射。排序顺序通过分数大小决定。）\nHash（键值对的无序散列表）\n\n","tags":["中间件"]},{"title":"Zookeeper","url":"/2023/01/15/Zookeeper/","content":"为什么作为大型分布式系统的可靠协调系统，zookeeper提供分布式系统底层且必不可少的基本功能。开发者可以轻松在Zookeeper之上构建自己的各种分布式系统。 \n核心优势： 实现了分布式环境的数据一致性，访问Zookeeper的树结构时，不同的节点返回的数据都是一致的。 对Zookeeper进行数据访问时，不会引起脏读、重复读。\n同时在实际生产环境中应用非常广泛、例如SOA的服务监控系统、Hadoop、Spark的分布式协调系统。\n基本功能配置维护、名字服务、分布式同步、组服务。\n","tags":["分布式"]},{"title":"JPA","url":"/2023/01/17/JPA/","content":""},{"title":"Session在开发中的使用","url":"/2023/01/15/Session%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"单机sessionHttpSession是通过Servlet容器进行创建和管理的，\n","tags":["项目开发"]},{"title":"接口文档技术","url":"/2023/01/17/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%8A%80%E6%9C%AF/","content":"Swagger用于生成、描述和调用Restful接口的web服务。 将项目中所有接口展现在页面上，并且可以进行调用和测试服务。\n\n将所有接口展现在页面上，后端程序员就不需要专门为前端使用者编写专门的接口文档。\n接口更新后直接修改代码中的Swagger描述就可以生成新文档了。\n通过页面可以直接进行接口调用、降低了开发阶段的调试成本。\n\nSpringFox对应Swagger 就像Spring中的IoC对DI 前者是思想、后者是实现。\nKnife4j为MVC框架集成Swagger生成API文档的增强解决方案。\n\n专注于前后端代码分离、微服务架构下使用灵活。\n提供Swagger的增强解决方案，不同于之改善前端UI的部分。\n\nSmart-DocSwagger在生成api文档需要在接口上添加注解等，这是一种侵入的方式。smart-doc是一种非侵入的方式多数情况多数人会选择Swagger + openapi技术栈。\n","tags":["项目开发"]},{"title":"集中式与分布式系统区别与选择","url":"/2022/11/27/%E9%9B%86%E4%B8%AD%E5%BC%8F%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9/","content":"集中式系统特点一个主机带多个终端。终端不具备数据处理能力，仅负责数据的录入和输出。而运算、存储等全部在主机上进行。\n集中式系统利弊优点：\n\n架构简单，通用和应用耦合度低，资源调度灵活.\n数据集中存储和处理，所以系统响应快，数据可靠性高，一致性好。\n稳健、可靠、易维护管理的特点。\n\n缺点：\n\n单机不可用会造成全局不可用。\n单点故障（单个点发生故障时，会波及到整个系统或者网络，从而导致整个系统或网络的瘫痪）\n扩展性差\n\n分布式系统特点分布式系统 高内聚和透明性。\n\n内聚性 ：每一个数据库分布节点高度自治，由本地的数据库管理系统。\n透明性：每一个数据库分布节点对用户的应用来说都是透明的，看不出是本地还是远程。\n\n分布式系统利弊灵活，性价比高，同时安全自主，弹性伸缩能力优势明显。\n分布式系统去中心化，通过主备，冗余、哈希等实现了计算与存储的高可用性。\n","tags":["分布式"]},{"title":"文件上传下载","url":"/2023/01/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/","content":"需求功能需要将数据文件上传到服务端，或者将服务端的数据以某种文件形式下载到客户端。\n实现Spring Boo文件上传与下载。https://www.jianshu.com/p/95469ecfbb62\n","tags":["项目开发"]},{"title":"定时任务","url":"/2023/01/17/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","content":"应用场景每天&#x2F;月&#x2F;周生成日志汇总、定时消息推送、定时生成数据表格等\n实现\nJDK内置\nTimer\nScheduleExecutorService\n\n\nNetty\nHashedWheelTimer\n\n\nSpring\nSchedule\nQuartz\n\n\n分布式集群\nQuartz持久化JDBC方式\nElastic-job\nxxl-job\n\n\n\n","tags":["项目开发"]},{"title":"Spring核心","url":"/2023/01/19/Spring%E6%A0%B8%E5%BF%83/","content":"特性\n非侵入\n控制反转\n依赖注入\n容器\n组件化\n一站式\n\n核心概念控制反转（IoC）、面向切面编程（Aop）依赖注入（DI）\n核心模块开发过程中可以根据需求有选择性地使用所需要的模块。\n\nCore Container （核心容器：构建其他模块建立的基础，组成：Beans、Core、Context、SpEL）Bean模块： 提供框架的基础部分，包括控制反转和依赖注入。Core核心模块： 封装了Spring的底层部分，包括资源访问、类型转换及一些常用工具类。\nData Access&#x2F;Integration（数据访问&#x2F;集成）JDBC 模块： JDBC的样例模板ORM 模块OXM 模块JMS 模块Transaction 事务模块：支持编程和声明式事务管理。\nWeb （网络）Web 模块：提供了基本的Web开发集成特性Servlet 模块：提供了一个Spring MVC Web框架实现。WebSocket 模块Webflux 模块\nAOP、Aspects、Instrumentation和MessagingCore container之上的是Aop、Aspects等模块。Aop 模块：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，而且动态把这些功能添加到需要的代码中， 各司其职，降低业务逻辑和通用功能的耦合。Aspects 模块： 提供了AspectJ的集成，是一个强大功能且成熟的面向切面（AOP）框架。Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。messaging 模块：对消息传递体系结构和协议的支持。jcl 模块：对日志框架集成的模块。\nTest 模块Spring 支持Junit和TestNG 测试框架，而且额外提供了Spring的测试功能，比如Web框架测试，模拟Http请求的功能。包含 Mock Objects， TestContext Framework， Spring MVC Test, WebTestClient。\n\nSpring核心组件Spring的核心组件有五个： \n\nSpring IOC：控制反转（IoC）和依赖注入（DI）框架。 \n\nSpring AOP：面向切面编程（AOP）框架。 \n\nSpring DAO：数据访问对象（DAO）框架。\n\nSpring Context：应用上下文框架。\n\nSpring MVC：模型视图控制器（MVC）框架。\n\nIOC容器：IoC容器是Spring的核心，它管理着整个Spring框架的组件。通过IoC容器可以将项目中的对象解耦，实现面向切面编程（AOP），它可以在不改变代码的情况下，对程序进行非常精细的控制。\n\nAOP：AOP是Spring的另一个核心组件，它是用于实现切面编程（AOP）的基础技术。AOP可以将非核心业务逻辑从业务逻辑中分离出来，并进行封装，从而有效地减少代码的冗余，提高代码的可重用性，并有助于系统的维护和更新。 \n\nSpring MVC：Spring MVC是Spring框架的另一个核心组件，它是基于Java EE的MVC模式的Web框架，它可以将Web请求映射到控制器。\n\n\nSpring工作原理Spring工作原理是通过IOC容器来完成的，IOC容器用Java语言的反射机制来创建一个实例，然后通过DI来连接组件，使得容器中的每一个组件都可以与其他组件交互。同时，容器中的每一个组件都可以通过配置文件来设置属性，从而实现松耦合的效果。\n","tags":["Spring"]},{"title":"项目开发规范","url":"/2023/01/19/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/","content":"测试单元测试、集成测试\n","tags":["项目开发"]}]